Stack
---------------
Stack is the collection of items which follows LIFO(Last IN First OUT) feature. Means the item which is added in the last will be removed first.

Operation on Stack
---------------------
1. push : Adding new element on the top of the stack.
2. pop: Removing element from the top of the stack.
3. peep/peek/stackTop: Display top element without removing it from the top of the stack.
4. isEmpty():
    Underflow: Trying to pop an element from an empty stack.
5. isFull():
    Overflow: Trying to push a new element in a stack which is already full.



Stack ADT
-----------------
    stk[]
    top

    isFull()
    isEmpty()
    push()
    pop()
    peep() / peek() / stackTop()

Implementation of Stack
-----------------------
1. Using Array
2. Using Linked List

----------------------
Analysis of Stack operations
---------------------------
O(1)

Exercise
    Reverse a string using stack.



Applications of stack
----------------------------
1. Parenthisis matching
2. Method call
3. History
4. Recursion
5. Expression evalution


Expression evalution
---------------------------
    Polish Notation
    ----------------------
    1. Infix Notation (a + b)
    2. Prefix Notation / Polish Notation (+ab)
    3. Postfix Notation / Reverse Polish (ab+)

Expression Solution
----------------------------
1.  ^,$,Up arrow -> Power  (R To L)
2. * / % (L to R)
3. +,- (L to R)

Convertion
----------------    
    Infix to postfix
    Infix to prefix
    Postfix to Infix
    Prefix to Infix


{ [(a + b) - (c * d)] * {e + f} / e }
Exercise:
    Write a program to check the parenthisis in an Expression

    class ParenthisisChecker {
        public boolean isMatch(String expression) {

        }
    }